# Вводится двумерный список в виде таблицы целых чисел
# (см. пример ниже). С помощью list comprehension
# преобразовать двумерный список в одномерный так,
# чтобы значения элементов шли в обратном порядке.
# Результат отобразить в виде строки из чисел,
# записанных через пробел.

import sys

s = sys.stdin.readlines()
lst_in = [list(map(int, x.strip().split())) for x in s]

l = [x for row in lst_in[::-1] for x in row[::-1]]

print(*l)

# Вводится список целых чисел в строку через пробел.
# С помощью list comprehension сформировать из них
# двумерный список lst размером N x N (квадратную
# таблицу чисел). Гарантируется, что из набора введенных
# чисел можно сформировать квадратную матрицу (таблицу).

m = list(map(int, input().split()))
n = int(len(m) ** 0.5)
k = [[a for a in m[0 + i:n + i]] for i in range(len(m))[::n]]
print(k)

# Необходимо преобразовать его в двумерный (вложенный)
# список lst, где каждая строка представляется списком
# из слов (слова разделяются пробелом), но сохранять
# слова только длиной более трех символов. Решить данную
# задачу с использованием list comprehension.

t = ["– Скажи-ка, дядя, ведь не даром",
    "Я Python выучил с каналом",
    "Балакирев что раздавал?",
    "Ведь были ж заданья боевые,",
    "Да, говорят, еще какие!",
    "Недаром помнит вся расия",
    "Как мы рубили их тогда!"
    ]
l = [[word for word in t[row].split() if len(word) > 3] for row in range(len(t))]
print(l)

# Повторите задачу с транспонированием прямоугольной матрицы с
# помощью list comprehension, изложенной в видео-уроке к этой
# практике. На вход поступает таблица целых чисел, на выходе
# нужно отобразить эту же таблицу в транспонированном виде
# (строки заменяются на столбцы), используя команду:
# for row in A:
# print(*row)
# где A - транспонированный двумерный список. Желательно сделать эту задачу не пересматривая видео.

A = [[row[i] for row in m] for i in range(len(m[0]))]
for row in A:
    print(*row)